services:
  modular-api:
    image: public.ecr.aws/x4s4z8e1/syndicate/modular-api:5.4.0-rule-engine
    container_name: modular-api
    ports:
      - "8085:8085"
    environment:
      MODULAR_API_INIT_PASSWORD: "${MODULAR_API_INIT_PASSWORD:-systempassword}"
      MODULAR_API_SECRET_KEY: "${MODULAR_API_SECRET_KEY:-KXt3HbrdpxegB1uThnZamlE2kQR89L7w=}"
      MODULAR_API_MODE: onprem
      MODULAR_API_MONGO_URI: "${MODULAR_API_MONGO_URI:-mongodb://mongouser:mongopassword@mongo:27017/}"
      MODULAR_API_MONGO_DATABASE: "${MODULAR_API_MONGO_DATABASE:-modular-api}"
      MODULAR_CLI_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      MODULAR_CLI_VAULT_ADDR: http://vault:8200
    depends_on:
      mongo:
        condition: service_healthy
    restart: always
    profiles:
      - modular-api
    networks:
      - rule-engine-net
  modular-service:
    image: public.ecr.aws/x4s4z8e1/syndicate/modular-service:5.4.0
    container_name: modular-service
    ports:
      - "8040:8040"
    environment:
      MODULAR_SERVICE_SYSTEM_USER_PASSWORD: "${MODULAR_SERVICE_SYSTEM_USER_PASSWORD:-systempassword}"
      MODULAR_SERVICE_VAULT_ENDPOINT: http://vault:8200
      MODULAR_SERVICE_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      MODULAR_SERVICE_MONGO_URI: "${MODULAR_SERVICE_MONGO_URI:-mongodb://mongouser:mongopassword@mongo:27017/}"
      MODULAR_SERVICE_MONGO_DATABASE: "${SRE_MONGO_DB_NAME:-syndicate-rule-engine}"
      MODULAR_SDK_SERVICE_MODE: docker
      MODULAR_SDK_MONGO_DB_NAME: "${SRE_MONGO_DB_NAME:-syndicate-rule-engine}"
      MODULAR_SDK_MONGO_URI: "${MODULAR_SDK_MONGO_URI:-mongodb://mongouser:$mongopassword@mongo:27017/}"
      MODULAR_SDK_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      MODULAR_SDK_VAULT_URL: "http://vault:8200"
      MODULAR_SDK_APPLICATION_NAME: syndicate-rule-engine
    depends_on:
      mongo:
        condition: service_healthy
      vault:
        condition: service_healthy
    restart: always
    profiles:
      - modular-service
    networks:
      - rule-engine-net
  rule-engine-celeryworker:
    image: public.ecr.aws/x4s4z8e1/syndicate/rule-engine:5.7.0
    container_name: rule-engine-celeryworker
    restart: always
    entrypoint: ["/src/entrypoint.sh", "celeryworker"]
#    volumes:
#      - rule-engine-data:/data
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
      vault:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      SRE_SYSTEM_USER_PASSWORD: "${SRE_SYSTEM_USER_PASSWORD:-systempassword}"
      SRE_SERVICE_MODE: docker
      SRE_INNER_CACHE_TTL_SECONDS: 300
      SRE_MINIO_ENDPOINT: http://minio:9000
      SRE_MINIO_ACCESS_KEY_ID: "${SRE_MINIO_ACCESS_KEY_ID:-miniouser}"
      SRE_MINIO_SECRET_ACCESS_KEY: "${SRE_MINIO_SECRET_ACCESS_KEY:-miniopassword}"
      SRE_VAULT_ENDPOINT: http://vault:8200
      SRE_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      SRE_MONGO_URI: "${SRE_MONGO_URI:-mongodb://mongouser:$mongopassword@mongo:27017/}"
      SRE_MONGO_DB_NAME: "${SRE_MONGO_DB_NAME:-syndicate-rule-engine}"
      MODULAR_SDK_SERVICE_MODE: docker
      MODULAR_SDK_MONGO_DB_NAME: "${SRE_MONGO_DB_NAME:-syndicate-rule-engine}"
      MODULAR_SDK_MONGO_URI: "${MODULAR_SDK_MONGO_URI:-mongodb://mongouser:$mongopassword@mongo:27017/}"
      MODULAR_SDK_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      MODULAR_SDK_VAULT_URL: "http://vault:8200"
      MODULAR_SDK_APPLICATION_NAME: syndicate-rule-engine
      REDIS_PASSWORD: redispassword
      REDIS_DOMAIN: redis
      REDIS_PORT: "6379"
    profiles:
      - rule-engine
    networks:
      - rule-engine-net
  rule-engine-celerybeat:
    image: public.ecr.aws/x4s4z8e1/syndicate/rule-engine:5.7.0
    container_name: rule-engine-celerybeat
    restart: always
    entrypoint: ["/src/entrypoint.sh", "celerybeat"]
#    volumes:
#      - rule-engine-data:/data
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
      vault:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      SRE_SYSTEM_USER_PASSWORD: "${SRE_SYSTEM_USER_PASSWORD:-systempassword}"
      SRE_SERVICE_MODE: docker
      SRE_INNER_CACHE_TTL_SECONDS: 300
      SRE_MINIO_ENDPOINT: http://minio:9000
      SRE_MINIO_ACCESS_KEY_ID: "${SRE_MINIO_ACCESS_KEY_ID:-miniouser}"
      SRE_MINIO_SECRET_ACCESS_KEY: "${SRE_MINIO_SECRET_ACCESS_KEY:-miniopassword}"
      SRE_VAULT_ENDPOINT: http://vault:8200
      SRE_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      SRE_MONGO_URI: "${SRE_MONGO_URI:-mongodb://mongouser:$mongopassword@mongo:27017/}"
      SRE_MONGO_DB_NAME: "${SRE_MONGO_DB_NAME:-syndicate-rule-engine}"
      MODULAR_SDK_SERVICE_MODE: docker
      MODULAR_SDK_MONGO_DB_NAME: "${SRE_MONGO_DB_NAME:-syndicate-rule-engine}"
      MODULAR_SDK_MONGO_URI: "${MODULAR_SDK_MONGO_URI:-mongodb://mongouser:$mongopassword@mongo:27017/}"
      MODULAR_SDK_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      MODULAR_SDK_VAULT_URL: "http://vault:8200"
      MODULAR_SDK_APPLICATION_NAME: syndicate-rule-engine
      REDIS_PASSWORD: redispassword
      REDIS_DOMAIN: redis
      REDIS_PORT: "6379"
    profiles:
      - rule-engine
    networks:
      - rule-engine-net
  rule-engine:
    image: public.ecr.aws/x4s4z8e1/syndicate/rule-engine:5.7.0
    container_name: rule-engine
    ports:
      - "8000:8000"
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
      vault:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      SRE_SYSTEM_USER_PASSWORD: "${SRE_SYSTEM_USER_PASSWORD:-systempassword}"
      SRE_SERVICE_MODE: docker
      SRE_INNER_CACHE_TTL_SECONDS: 300
      SRE_MINIO_ENDPOINT: http://minio:9000
      SRE_MINIO_ACCESS_KEY_ID: "${SRE_MINIO_ACCESS_KEY_ID:-miniouser}"
      SRE_MINIO_SECRET_ACCESS_KEY: "${SRE_MINIO_SECRET_ACCESS_KEY:-miniopassword}"
      SRE_VAULT_ENDPOINT: http://vault:8200
      SRE_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      SRE_MONGO_URI: "${SRE_MONGO_URI:-mongodb://mongouser:$mongopassword@mongo:27017/}"
      SRE_MONGO_DB_NAME: "${SRE_MONGO_DB_NAME:-syndicate-rule-engine}"
      MODULAR_SDK_SERVICE_MODE: docker
      MODULAR_SDK_MONGO_DB_NAME: "${SRE_MONGO_DB_NAME:-syndicate-rule-engine}"
      MODULAR_SDK_MONGO_URI: "${MODULAR_SDK_MONGO_URI:-mongodb://mongouser:$mongopassword@mongo:27017/}"
      MODULAR_SDK_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
      MODULAR_SDK_VAULT_URL: "http://vault:8200"
      MODULAR_SDK_APPLICATION_NAME: syndicate-rule-engine
      REDIS_PASSWORD: redispassword
      REDIS_DOMAIN: redis
      REDIS_PORT: "6379"
    profiles:
      - rule-engine
    networks:
      - rule-engine-net
  minio:
    image: quay.io/minio/minio:RELEASE.2025-03-12T18-04-18Z
    container_name: minio
    ports:  # for presigned urls
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data/minio
    command: ["server", "/data/minio", "--console-address", ":9001"]
    environment:
      MINIO_ROOT_USER: "${SRE_MINIO_ACCESS_KEY_ID:-miniouser}"
      MINIO_ROOT_PASSWORD: "${SRE_MINIO_SECRET_ACCESS_KEY:-miniopassword}"
    restart: always
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      # default params are good, minio becomes healthy quite fast
    networks:
      - rule-engine-net
  mongo:
    image: mongo:5.0.28
    container_name: mongo
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s
#      start_interval: 5s  # in case this setting is supported it should become healthy must faster
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME:-mongouser}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:-mongopassword}"
    ports:
      - "27017:27017"
    restart: always
    networks:
      - rule-engine-net
  redis:
    image: redis:7.2.3-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass redispassword
    networks:
      - rule-engine-net
  vault:
    image: hashicorp/vault:1.17.2
    container_name: vault
    ports:
      - "8200:8200"
    volumes:
      - vault-data:/vault/file/
    configs:
      - source: vault_config
        target: /vault/config/config.hcl
      - source: vault_init
        target: /usr/local/bin/vault-init.sh
        mode: 0551
    environment:
      VAULT_ADDR: http://127.0.0.1:8200
      MY_VAULT_TOKEN: "${SRE_VAULT_TOKEN:-token}"
    cap_add:
      - IPC_LOCK
    entrypoint: /usr/local/bin/vault-init.sh
    restart: always
    networks:
      - rule-engine-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--proxy", "off", "http://127.0.0.1:8200/v1/sys/health?standbyok=true"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
#      start_interval: 5s  # in case this setting is supported it should become healthy must faster
volumes:
  vault-data:
  mongo-data:
  minio-data:
  redis-data:
#  rule-engine-data:
configs:
  vault_config:
    content: |
      ui = true
      listener "tcp" {
        address     = "0.0.0.0:8200"
        tls_disable = 1
      }
      storage "file" {
        path = "/vault/file"
      }
      api_addr = "http://127.0.0.1:8200"
      disable_mlock = "true"
  vault_init:
    content: |
      #!/usr/bin/env sh
      set -e
      unseal () {
        vault operator unseal $(grep 'Key 1:' /vault/file/keys | awk '{print $$NF}')
        vault operator unseal $(grep 'Key 2:' /vault/file/keys | awk '{print $$NF}')
        vault operator unseal $(grep 'Key 3:' /vault/file/keys | awk '{print $$NF}')
      }
      init () { vault operator init > /vault/file/keys; }
      log_in () {
        export ROOT_TOKEN=$(grep 'Initial Root Token:' /vault/file/keys | awk '{print $$NF}')
        vault login "$$ROOT_TOKEN"
      }
      create_token () { vault token create -id "$$MY_VAULT_TOKEN"; }
      vault server -config=/vault/config/config.hcl &
      sleep 1
      if [ -s /vault/file/keys ]; then
        unseal
      else
        init
        unseal
        log_in
        create_token
      fi
      vault status > /vault/file/status
      wait
networks:
  rule-engine-net:
    name: rule-engine
    driver: bridge
