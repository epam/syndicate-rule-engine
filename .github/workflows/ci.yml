name: ci-for-build-and-tests

on:
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  check_modified_files:
    name: Check modified files in directories
    runs-on: ubuntu-latest
    outputs:
      cli_files_changes_found: ${{ steps.check_cli_files.outputs.changes_found }}
      src_files_changes_found: ${{ steps.check_src_files.outputs.changes_found }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
   

    - name: Check modified files in cli directory
      id: check_cli_files
      shell: bash
      run: |
        ls -la ./.github/workflows/
        git fetch origin ${{ github.event.pull_request.base.sha }}
        changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }})
        echo "Changed files: ${changed_files}"
        checked_directory="cli/"
        for file in ${changed_files}
        do
          if [[ ${file} == ${checked_directory}* ]]
          then
            echo "Target directory was modified."
            echo "changes_found=true" >>$GITHUB_OUTPUT
            exit 0
          fi
        done
        echo "Target directory was not modified."
        echo "changes_found=false" >>$GITHUB_OUTPUT
        echo "dist=/tmp/bavp/dist" >>$GITHUB_OUTPUT

    - name: Check modified files in src directory
      id: check_src_files
      shell: bash
      run: |
        git fetch origin ${{ github.event.pull_request.base.sha }}
        changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }})
        echo "Changed files: ${changed_files}"
        checked_directory="src/"
        for file in ${changed_files}
        do
          if [[ ${file} == ${checked_directory}* ]]
          then
            echo "Target directory was modified."
            echo "changes_found=true" >>$GITHUB_OUTPUT
            exit 0
          fi
        done
        echo "Target directory was not modified."
        echo "changes_found=false" >>$GITHUB_OUTPUT
        echo "dist=/tmp/bavp/dist" >>$GITHUB_OUTPUT

  build_package:
    name: Build CLI package
    needs: check_modified_files
    if: ${{ needs.check_modified_files.outputs.cli_files_changes_found == 'true' }}
    uses: ./.github/workflows/build-and-check-python-package.yml
    with:
      path: ./cli

  tests:
    name: Run Python tests
    needs: check_modified_files
    if: ${{ needs.check_modified_files.outputs.src_files_changes_found == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.10"
#          - "3.11"  # TODO: if it's uncommented the pipeline fails because it tries to upload coverage.xml twice for each version and there is a conflict. Should be fixed
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Install uv and set the python version
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python-version }}
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    - name: Install dependencies
      run: |
        uv sync --all-extras --all-groups --prerelease=allow
    - name: Run tests with Python ${{ matrix.python-version }}
      run: |
        uv run --frozen pytest --verbose --cov=src/ --cov-report=term --cov-report=xml:coverage.xml --junitxml=report.xml -n auto
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml
        retention-days: 1
    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: report.xml
        retention-days: 1